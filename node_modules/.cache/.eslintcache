[{"/var/www/html2/glpi-app/src/index.js":"1","/var/www/html2/glpi-app/src/App.js":"2","/var/www/html2/glpi-app/src/reportWebVitals.js":"3","/var/www/html2/glpi-app/src/charts/TicketByEntiter.js":"4","/var/www/html2/glpi-app/src/charts/TicketByTechnicien.js":"5","/var/www/html2/glpi-app/src/charts/SatisfactionByTechnicien.js":"6","/var/www/html2/glpi-app/src/charts/SatisfactionByEntiter.js":"7","/var/www/html2/glpi-app/src/charts/TicketResoluByEntiter.js":"8"},{"size":535,"mtime":1653766183394,"results":"9","hashOfConfig":"10"},{"size":11367,"mtime":1653831598970,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1653766183394,"results":"12","hashOfConfig":"10"},{"size":2332,"mtime":1653766183394,"results":"13","hashOfConfig":"10"},{"size":2102,"mtime":1653766183394,"results":"14","hashOfConfig":"10"},{"size":2118,"mtime":1653766183394,"results":"15","hashOfConfig":"10"},{"size":2155,"mtime":1653766183394,"results":"16","hashOfConfig":"10"},{"size":2277,"mtime":1653766183394,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10ltmt7",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/var/www/html2/glpi-app/src/index.js",[],[],"/var/www/html2/glpi-app/src/App.js",["47","48","49"],[],"/var/www/html2/glpi-app/src/reportWebVitals.js",[],[],"/var/www/html2/glpi-app/src/charts/TicketByEntiter.js",["50","51","52","53"],[],"import React, { useState,useEffect } from 'react';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut, Pie } from 'react-chartjs-2';\nimport axios from 'axios';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\n\n\n\nfunction TicketByEntiter(props) {\n    const [chartData, setChartData] = useState(props.chartDaa)\n    const [chartlebels, setChartlebels] = useState(props.chartLebels)\n   \n    useEffect(() => {\n        \n        setChartData(props.chartData)\n        setChartlebels(props.chartLebels)\n        \n    })\n    const data = {\n        labels: chartlebels,\n        datasets: [\n            {\n\n                data: chartData,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                    'rgba(255, 206, 86, 1)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                    'rgba(255, 206, 86, 1)',\n                ],\n                borderWidth: 1,\n            },\n        ],\n    }\n    var options = {\n        tooltips: {\n            enabled: false\n        },\n        plugins: {\n            datalabels: {\n                formatter: (value, ctx) => {\n                    let sum = 0;\n                    let dataArr = ctx.chart.data.datasets[0].data;\n                    dataArr.map(data => {\n                        sum += data;\n                    });\n                    let percentage = (value*100 / sum).toFixed(2)+\"%\";\n                    return percentage;\n                },\n                color: 'black',\n                anchor:'',\n               \n            }\n        }\n    };\n    return (\n        <div>\n            <h1>Ticket par Entites</h1>\n            <Pie options={options} plugins={[ChartDataLabels]}   data={data} />\n        </div>\n    )\n}\nexport default TicketByEntiter;","/var/www/html2/glpi-app/src/charts/TicketByTechnicien.js",["54","55"],[],"import React, { useState,useEffect } from 'react';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\n\n\n\nfunction TicketByTechnicien(props) {\n    const [chartData, setChartData] = useState((props.chartData))\n    const [chartlebels, setChartlebels] = useState(props.chartLebels)\n   \n    useEffect(() => {\n        \n        setChartData(props.chartData)\n        setChartlebels(props.chartLebels)\n        \n    })\n    const data = {\n        labels: chartlebels,\n        datasets: [\n            {\n                label: 'tickets',\n                data: chartData,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86,1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255,1)',\n                    'rgba(255, 159, 64,1)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 1,\n            },\n        ],\n    }\n\n\n    var options = {\n        indexAxis: 'y',\n        tooltips: {\n            enabled: false\n        },\n        plugins: {\n            datalabels: {\n                formatter: (value, ctx) => {\n                    return value;\n                },\n                color: 'black',\n            }\n        }\n    };\n    return (\n        <div>\n            <h1>Ticket par Technicien</h1>\n            <Bar options={options} plugins={[ChartDataLabels]} data={data}  />\n        </div>\n    )\n}\nexport default TicketByTechnicien;","/var/www/html2/glpi-app/src/charts/SatisfactionByTechnicien.js",["56","57"],[],"import React, { useState, useEffect } from 'react';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\n\n\n\nfunction SatisfactionByTechnicien(props) {\n    const [chartData, setChartData] = useState()\n    const [chartlebels, setChartlebels] = useState()\n\n    useEffect(() => {\n        setChartData(props.chartData)\n        setChartlebels(props.chartLebels)\n    })\n\n    const data = {\n        labels: chartlebels,\n        datasets: [\n            {\n                label: \"line\",\n                data: chartData,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 1,\n            },\n        ],\n    }\n    var options = {\n        tooltips: {\n            enabled: false\n        },\n        plugins: {\n            datalabels: {\n                formatter: (value, ctx) => {\n                    let percentage = (value * 100 / 5).toFixed(2) + \"%\";\n                    return percentage;\n                },\n                color: 'black',\n            }\n        }\n    };\n    return (\n        <div>\n            <h1>Satisfaction par Technicien</h1>\n            <Bar options={options} plugins={[ChartDataLabels]} data={data} />\n        </div>\n    )\n}\nexport default SatisfactionByTechnicien;","/var/www/html2/glpi-app/src/charts/SatisfactionByEntiter.js",["58","59"],[],"import React, { useState,useEffect } from 'react';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\n\n\n\nfunction SatisfactionByEntiter(props) {\n    const [chartData, setChartData] = useState(props.chartDaa)\n    const [chartlebels, setChartlebels] = useState(props.chartLebels)\n    useEffect(()=>{\n        setChartData(props.chartData)\n        setChartlebels(props.chartLebels)   \n    })\n   \n\n    const data = {\n        labels: chartlebels,\n        datasets: [\n            {\n                label: \"line\",\n                data: chartData,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 1,\n            },\n        ],\n    }\n    var options = {\n        tooltips: {\n            enabled: false\n        },\n        plugins: {\n            datalabels: {\n                formatter: (value, ctx) => {\n                    let percentage = (value*100 / 5).toFixed(2)+\"%\";\n                    return percentage;\n                },\n                \n                color: 'black',\n            }\n        }\n    };\n    return (\n        <div>\n            <h1>Satisfaction par Entites</h1>\n            <Bar  data={data} plugins={[ChartDataLabels]} options={options} />\n        </div>\n    )\n}\nexport default SatisfactionByEntiter;","/var/www/html2/glpi-app/src/charts/TicketResoluByEntiter.js",["60","61"],[],"import React, { useState,useEffect } from 'react';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\n\n\n\nfunction TicketResoluByEntiter(props) {\n    const [chartData, setChartData] = useState(props.chartDaa)\n    const [chartlebels, setChartlebels] = useState(props.chartLebels)\n   \n    useEffect(() => {\n        \n        setChartData(props.chartData)\n        setChartlebels(props.chartLebels)\n        \n    })\n    /*\n    useEffect(() => {\n        \n        const interval = setInterval(() => {\n            getdata();\n          }, 1000);\n          return () => clearInterval(interval);\n        \n    },[]);*/\n    const data = {\n        labels: chartlebels,\n        datasets: [\n            {\n                label: \"line\",\n                data: chartData,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 2,\n            },\n        ],\n    }\n    var options = {\n        tooltips: {\n            enabled: false\n        },\n        plugins: {\n            datalabels: {\n                formatter: (value, ctx) => {\n                    return value;\n                },\n                color: 'black',\n            }\n        }\n    };\n    return (\n        <div>\n            <h1>Ticket Resolu par Entites</h1>\n            <Bar options={options} plugins={[ChartDataLabels]} data={data} />\n        </div>\n    )\n}\nexport default TicketResoluByEntiter;",{"ruleId":"62","severity":1,"message":"63","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":12},{"ruleId":"66","severity":1,"message":"67","line":84,"column":42,"nodeType":"68","messageId":"69","endLine":84,"endColumn":44},{"ruleId":"66","severity":1,"message":"67","line":92,"column":45,"nodeType":"68","messageId":"69","endLine":92,"endColumn":47},{"ruleId":"62","severity":1,"message":"70","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":18},{"ruleId":"62","severity":1,"message":"71","line":4,"column":8,"nodeType":"64","messageId":"65","endLine":4,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":17,"column":5,"nodeType":"64","endLine":17,"endColumn":14,"suggestions":"74"},{"ruleId":"66","severity":1,"message":"67","line":60,"column":38,"nodeType":"68","messageId":"69","endLine":60,"endColumn":40},{"ruleId":"62","severity":1,"message":"71","line":12,"column":8,"nodeType":"64","messageId":"65","endLine":12,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":32,"column":5,"nodeType":"64","endLine":32,"endColumn":14,"suggestions":"75"},{"ruleId":"62","severity":1,"message":"71","line":14,"column":8,"nodeType":"64","messageId":"65","endLine":14,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":32,"column":5,"nodeType":"64","endLine":32,"endColumn":14,"suggestions":"76"},{"ruleId":"62","severity":1,"message":"71","line":12,"column":8,"nodeType":"64","messageId":"65","endLine":12,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":29,"column":5,"nodeType":"64","endLine":29,"endColumn":14,"suggestions":"77"},{"ruleId":"62","severity":1,"message":"71","line":12,"column":8,"nodeType":"64","messageId":"65","endLine":12,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":31,"column":5,"nodeType":"64","endLine":31,"endColumn":14,"suggestions":"78"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Doughnut' is defined but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setChartData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.chartData, props.chartLebels] as a second argument to the useEffect Hook.",["79"],["80"],["81"],["82"],["83"],{"desc":"84","fix":"85"},{"desc":"84","fix":"86"},{"desc":"84","fix":"87"},{"desc":"84","fix":"88"},{"desc":"84","fix":"89"},"Add dependencies array: [props.chartData, props.chartLebels]",{"range":"90","text":"91"},{"range":"92","text":"91"},{"range":"93","text":"91"},{"range":"94","text":"91"},{"range":"95","text":"91"},[607,607],", [props.chartData, props.chartLebels]",[728,728],[680,680],[705,705],[727,727]]